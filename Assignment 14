#include <iostream>
#include <vector>
using namespace std;
int factorial(int num, vector<int>& numberStack);
int fibonacci(int num);
int main ()
{
  vector<int>numberStack;
  int num;
  char choice;
  cout << "Enter a choice Factorial (a) or Fibonacci (b): ";
  cin >> choice;
  cout << "Enter a number: ";
  cin >> num;
  if (choice == 'a' || choice == 'A')
  {
    int factNum;
    factNum = factorial (num, numberStack);
    cout << "Factorial of " << num << " is " << factNum << endl;
  }
  else if (choice == 'b' || choice == 'B')
  {
    int fibNum;
    fibNum = fibonacci (num);
    cout << "Fibonacci of " << num << " is " << fibNum << endl;
  }
}
int factorial (int num, vector<int>& numberStack)
{
  int x;
  numberStack.push_back(num);
  for (int i = 0; i < numberStack.size(); i++)
  {
    cout << numberStack[i] << " ";
  }
  cout << endl;
  if (num == 0)
  {
    numberStack.pop_back();
    return 0;
  }
  else if (num == 1)
  {
  	numberStack.pop_back();
  	for (int i = 0; i < numberStack.size(); i++)
    	{
      		cout << numberStack[i] << " ";
    	}
    	cout << endl;
  	return 1;
	}
  else
  {
  	x = num * factorial (num - 1, numberStack);
	numberStack.pop_back();
  }
  for (int i = 0; i < numberStack.size(); i++)
  {
  	cout << numberStack[i] << " ";
  }
  cout << endl;
  return x;
}
int fibonacci(int num)
{
  if (num == 0)
  {
  	return 0;
  }
  else if (num == 1 || num == 2)
  {
  	return 1;
  }
  int x = (fibonacci(num - 1) + fibonacci(num - 2));
  return x;
}
